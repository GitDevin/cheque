
plugins {
    id 'groovy'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.5.12'
    implementation 'io.dropwizard:dropwizard-core:1.0.2'
    implementation 'io.dropwizard:dropwizard-jdbi:1.0.2'
    implementation 'io.dropwizard:dropwizard-views-freemarker:1.0.2'
    implementation 'io.dropwizard:dropwizard-assets:1.0.2'
    implementation 'mysql:mysql-connector-java:6.0.2'
    implementation 'com.ibm.icu:icu4j:57.1'
    implementation 'io.dropwizard.modules:dropwizard-flyway:1.0.0-1'
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"

    testImplementation 'com.h2database:h2:1.4.192'
    testImplementation 'io.dropwizard:dropwizard-testing:1.0.2'
    testImplementation "org.junit.jupiter:junit-jupiter:5.5.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.2"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    test.useJUnitPlatform()
}

application {
    mainClassName = 'com.kyl.cheque.ChequeApplication'
}

tasks.register('hello') {
    doLast {
        println 'hello world'
    }
}

tasks.register('readEnvFile') {
    doLast {
        file('../.env').readLines().findAll{line -> !line.isBlank()}.each {
            def (key, value) = it.tokenize('=')
//            environment key, value
            project.properties.put(key, value)
            project.env
//            println "$key : $value"
        }
        println 'read .env file'
    }
}

task env(type: Test) {

    println 'read .env file'
}

run {
    doFirst {
        file('../.env').readLines().findAll{line -> !line.isBlank()}.each {
            def (key, value) = it.tokenize('=')
            environment key, value
        }
    }
    args = ['server', 'src/test/resources/cheque.yml']
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

shadowJar {
}
